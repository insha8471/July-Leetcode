Approach : BFs

Time complexity : O(n^2);
Space complexity : O(n)


class Solution {
    public void makeGraph(TreeNode root, TreeNode prev, Map<TreeNode, List<TreeNode>> adj,Set<TreeNode> st){
        if(root == null){
            return;
        }

        if(root.left == null && root.right == null){
            st.add(root);
        }

        if(prev != null){
            adj.computeIfAbsent(root,k -> new ArrayList<>()).add(prev);
            adj.computeIfAbsent(prev,k -> new ArrayList<>()).add(root);
        }

        makeGraph(root.left, root, adj,st);
        makeGraph(root.right, root,adj, st);
    }
    public int countPairs(TreeNode root, int distance) {
        Map<TreeNode, List<TreeNode>> adj = new HashMap<>();
        Set<TreeNode> leafNode = new HashSet<>();

        makeGraph(root, null ,adj, leafNode);

        int result = 0;

        for(TreeNode leaf : leafNode){
            Queue<TreeNode> q = new LinkedList<>();
            Set<TreeNode> vis = new HashSet<>();

            q.add(leaf);
            vis.add(leaf);

            for(int level = 0;level<=distance;level++){
                int size = q.size();

                while(size-- > 0){
                    TreeNode curr = q.poll();

                    if(curr != leaf && leafNode.contains(curr)){
                        result++;
                    }

                    for(TreeNode neighbour : adj.getOrDefault(curr, new ArrayList<>())) {
                        if(!vis.contains(neighbour)){
                            q.add(neighbour);
                            vis.add(neighbour);
                        }
                    }
                }
            }
        }
        return result/2;
    }
}
