Time complexity : O(k^2 + n);

class Solution {

    public List<Integer> topSort(int[][] edges, int n){
        Map<Integer, List<Integer>> adj = new HashMap<>();

        for(int[] edge : edges){
            adj.computeIfAbsent(edge[0], k -> new ArrayList<>()).add(edge[1]);
        }

        Stack<Integer> st = new Stack<>();
        List<Integer> order = new ArrayList<>();
        int[] visited = new int[n+1];
        boolean[] hasCyclic = {false};

        for(int i=1;i<=n;i++){
            if(visited[i] == 0){
                dfs(i, adj, visited, st, hasCyclic);
                if(hasCyclic[0]){
                    return new ArrayList<>();
                }
            }
        }

        while(!st.isEmpty()){
            order.add(st.pop());
        }
        return order;
    }

    public void dfs(int node, Map<Integer, List<Integer>> adj,int[] visited, Stack<Integer> st, boolean[] cyclic){
        visited[node] = 1;

        for(int ngbr : adj.getOrDefault(node, new ArrayList<>())){
            if(visited[ngbr] == 0){
                dfs(ngbr,adj,visited,st,cyclic);
            }else if(visited[ngbr] == 1){
                cyclic[0] = true;
                return;
            }
        }

        visited[node] = 2;
        st.push(node);
     }
    public int[][] buildMatrix(int k, int[][] rowConditions, int[][] colConditions) {
        List<Integer> orderRow = topSort(rowConditions, k);
        List<Integer> orderCol = topSort(colConditions, k);

        if(orderRow.isEmpty() || orderCol.isEmpty())
            return new int[][]{};
        
        int[][] matrix = new int[k][k];
        Map<Integer, Integer> posMap = new HashMap<>();
        for(int i=0;i<k;i++){
            posMap.put(orderCol.get(i),i);
        }

        for(int i=0;i<k;i++){
            int elem = orderRow.get(i);
            if(posMap.containsKey(elem)){
                matrix[i][posMap.get(elem)] = elem;
            }
        }
        return matrix;
    }
}
