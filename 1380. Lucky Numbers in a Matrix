Time complexity : O(n*m)
Space complexity : O(n+m)

class Solution {
    public List<Integer> luckyNumbers (int[][] matrix) {
        int row = matrix.length;
        int col = matrix[0].length;


        List<Integer> minR = new ArrayList<>();
        for(int i=0;i<row;i++){
            int min = Integer.MAX_VALUE;
            for(int j=0;j<col;j++){
                min = Math.min(min, matrix[i][j]);
            }
            minR.add(min);
        }

        List<Integer> maxc = new ArrayList<>();
        for(int i=0;i<col;i++){
            int max = Integer.MIN_VALUE;
            for(int j=0;j<row;j++){
                max = Math.max(max, matrix[j][i]);
            }
            maxc.add(max);
        }

        List<Integer> res = new ArrayList<>();
        for(int i=0;i<row;i++){
            for(int j=0;j<col;j++){
                if(matrix[i][j] == minR.get(i) && matrix[i][j] == maxc.get(j)){
                    res.add(matrix[i][j]);
                }
            }
        }
        return res;
    }
}

Time complexity : O(n*m);
Space complexity : O(1);

class Solution {
    public List<Integer> luckyNumbers (int[][] matrix) {
        int m = matrix.length;
        int n = matrix[0].length;
        
        int minR = Integer.MIN_VALUE;
        for(int i=0;i<m;i++){
            int min = Integer.MAX_VALUE;
            for(int j=0;j<n;j++){
                min = Math.min(min, matrix[i][j]);
            }
            minR = Math.max(minR, min);
        }

        int maxc = Integer.MAX_VALUE;
        for(int i=0;i<n;i++){
            int max = Integer.MIN_VALUE;
            for(int j=0;j<m;j++){
                max = Math.max(max, matrix[j][i]);
            }
            maxc = Math.min(maxc, max);
        }

        List<Integer> res = new ArrayList<>();

        if(minR == maxc){
            res.add(minR);
        }
        return res;
    }
}
