Approach : Using Stack
Time complexity : O(n);
Space complexity : O(n)

class Solution {
    public int minimumDeletions(String s) {
        Stack<Character> st = new Stack<>();

        int result = 0;
        for(int i=0;i<s.length();i++){
            if(!st.isEmpty() && s.charAt(i) == 'a' && st.peek() == 'b'){
                st.pop();
                result++;
            }else{
                st.push(s.charAt(i));
            }
        }
        return result;
    }
}

Approach 2 : using prefix and suffix count(Two Pass)
Time complexity :O(n)
space complexity : O(n)

class Solution {
    public int minimumDeletions(String s) {
        int n = s.length();
        int[] bLeft = new int[n];
        int[] aRight = new int[n];

        int bCount = 0;
        for(int i=0;i<n;i++){
            bLeft[i] = bCount;
            if(s.charAt(i) == 'b'){
                bCount++;
            }
        }

        int aCount = 0;
        for(int i=n-1;i>=0;i--){
            aRight[i] = aCount;
            if(s.charAt(i) == 'a'){
                aCount++;
            }
        }

        int result = Integer.MAX_VALUE;
        for(int i=0;i<n;i++){
            result = Math.min(result, bLeft[i]+aRight[i]);
        }
        return result;
    }
}

Approach 3 : Using prefix and suffix count(one pass)
Time complexity : O(n)
Space complexity :O(n)

class Solution {
    public int minimumDeletions(String s) {
        int n = s.length();
        int[] aRight = new int[n];

        int aCount = 0;
        for(int i=n-1;i>=0;i--){
            aRight[i] = aCount;
            if(s.charAt(i) == 'a'){
                aCount++;
            }
        }

        int bCount = 0;

        int result = Integer.MAX_VALUE;
        for(int i=0;i<n;i++){
            result = Math.min(result, bCount+aRight[i]);
            if(s.charAt(i) == 'b'){
                bCount++;
            }
        }
        return result;
    }
}

Approach 4 : 
Time complexity :O(n);
Space complexity: O(1)

class Solution {
    public int minimumDeletions(String s) {
        int n = s.length();

        int aCount = 0;
        for(int x : s.toCharArray()){
            if(x == 'a'){
                aCount++;
            }
        }

        int bCount = 0;
        int result = Integer.MAX_VALUE;

        for(int x : s.toCharArray()){
            if(x == 'a'){
                aCount--;
            }
            result = Math.min(result, aCount + bCount);
            if(x == 'b'){
                bCount++;
            }
        }
        return result;
    }
}
