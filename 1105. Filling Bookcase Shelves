Approach : Recursion + Memoization
Time complexity : O(n*width)
Space complexity : O(n*width)

class Solution {
    int n;
    int width;
    int[][] t;
    public int solve(int[][] books,int i, int remWidth,int maxheight) {
        if(i >= n) {
            return maxheight;
        }

        if(t[i][remWidth] != -1) {
            return t[i][remWidth];
        }

        int bookW = books[i][0];
        int bookH = books[i][1];

        int keep = Integer.MAX_VALUE;
        int skip = Integer.MAX_VALUE;

        if(bookW <= remWidth) {
            keep = solve(books, i+1, remWidth-bookW, Math.max(maxheight, bookH));
        }

        skip =  maxheight + solve(books, i+1, width-bookW, bookH);

        return t[i][remWidth] = Math.min(keep, skip);
    }
    public int minHeightShelves(int[][] books, int shelfWidth) {
        n = books.length;
        width = shelfWidth;
        t = new int[1001][1001];

        for(int[] row : t) {
            Arrays.fill(row, -1);
        }
        
        int remWidth = shelfWidth;
        return solve(books, 0,remWidth, 0);
    }
}
