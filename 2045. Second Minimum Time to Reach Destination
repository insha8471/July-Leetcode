Time complexity : O(E log V)
Space complexity : O(E+V)

class Solution {
    public int secondMinimum(int n, int[][] edges, int time, int change) {
        List<List<Integer>> adj = new ArrayList<>();

        for(int i=0;i<=n;i++){
            adj.add(new ArrayList<>());
        }

        for(int[] edge : edges){
            int u = edge[0];
            int v = edge[1];

            adj.get(u).add(v);
            adj.get(v).add(u);
        }

        int[] d1 = new int[n+1];
        int[] d2 = new int[n+1];

        Arrays.fill(d1, Integer.MAX_VALUE);
        Arrays.fill(d2, Integer.MAX_VALUE);

        //(timePass,node)
        PriorityQueue<int[]> pq = new PriorityQueue<>((a,b) -> a[0]-b[0]);
        pq.offer(new int[]{0, 1});
        d1[0] = 0;

        while(!pq.isEmpty()){
            int[] curr = pq.poll();

            int timePass = curr[0];
            int node = curr[1];
            
            if(node == n && d2[n] != Integer.MAX_VALUE){
                return d2[n];
            }

            int div = timePass/change;
            if(div % 2 == 1){
                //red light
                timePass = change*(div+1);
            }

            for(int nbr : adj.get(node)){
                if(d1[nbr] > timePass + time){
                    d2[nbr] = d1[nbr];
                    d1[nbr] = timePass + time;
                    pq.offer(new int[]{timePass+time, nbr});
                }else if(d2[nbr] > timePass + time && d1[nbr] != timePass + time){
                    d2[nbr] = timePass+time;
                    pq.offer(new int[]{timePass+time, nbr});
                }
            }
        }
        return -1;
    }
}
